fn main() {
    let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    println!("{:?}", binary_search(&arr, 1));
}

// Алгоритм бинарного поиска, работает только для отсортированного массива
fn binary_search(arr: &[i32], target: i32) -> Option<usize> {
    let mut left = 0; // левая граница
    let mut right = arr.len() - 1; // правая граница

    // выполняем поиск до тех пор пока в рассматриваемом массиве не останется один элемент
    while left <= right {
        let middle = (left + right) / 2; // центральный элемент массива
        if arr[middle] == target {
            // если центральный элемент соответствует искомому, возвращаем индекс
            return Some(middle);
        } else if target > arr[middle] {
            // если искомый элемент больше центрального смещаем границы поиска до правой половины и повторяем поиск
            left = middle + 1;
        } else {
            // если искомый элемент меньше центрального смещаем границы поиска до левой половины и повторяем поиск
            right = middle - 1;
        }
    }
    // в случае отсутствия искомого элемента возвращаем None
    None
}
